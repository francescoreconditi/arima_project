[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "arima-forecaster"
version = "0.2.0"
description = "Libreria completa per il forecasting di serie temporali utilizzando modelli ARIMA"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Il Tuo Nome", email = "tuo.email@example.com" },
]
maintainers = [
    { name = "Il Tuo Nome", email = "tuo.email@example.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["time-series", "forecasting", "arima", "statistics", "machine-learning"]
requires-python = ">=3.9"

# Dipendenze principali
dependencies = [
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "statsmodels>=0.14.0",
    "scikit-learn>=1.3.0",
    "scipy>=1.10.0",
    "tqdm>=4.67.1",
    "fastapi>=0.116.1",
    "nbformat>=5.10.4",
    "jupyter>=1.1.1",
    "tabulate>=0.9.0",
    "quarto-cli>=1.7.33",
]

# Dipendenze opzionali
[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # test paralleli
    "black>=23.0.0",
    "ruff>=0.1.0",  # piÃ¹ veloce di flake8
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
viz = [
    "plotly>=5.15.0",
    "kaleido>=0.2.1",  # per export plotly
]
jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.0",
    "ipykernel>=6.25.0",
    "nbconvert>=7.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]
reports = [
    "jupyter>=1.0.0",
    "nbformat>=5.8.0",
]
api = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
]
dashboard = [
    "streamlit>=1.28.0",
    "streamlit-plotly-events>=0.0.6",
    "streamlit-aggrid>=0.3.4",
]
automl = [
    "optuna>=3.4.0",
    "hyperopt>=0.2.7",
    "scikit-optimize>=0.9.0",
    "tqdm>=4.66.0",
]
all = [
    "arima-forecaster[dev,viz,jupyter,docs,reports,api,dashboard,automl]",
]

[project.urls]
Homepage = "https://github.com/tuonome/arima-forecaster"
Documentation = "https://github.com/tuonome/arima-forecaster/docs"
Repository = "https://github.com/tuonome/arima-forecaster.git"
"Bug Tracker" = "https://github.com/tuonome/arima-forecaster/issues"
Changelog = "https://github.com/tuonome/arima-forecaster/releases"

[project.scripts]
arima-forecast = "arima_forecaster.cli:main"

# Configurazione tool

[tool.hatch.build.targets.wheel]
packages = ["src/arima_forecaster"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/examples",
    "/README.md",
    "/LICENSE",
    "/pyproject.toml",
]

# Configurazione Black
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Configurazione Ruff (sostituto di flake8)
[tool.ruff]
target-version = "py39"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "N",  # pep8-naming
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/**/*.py" = ["N802", "N803"]  # lowercase names OK in tests

# Configurazione MyPy
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "statsmodels.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
]
ignore_missing_imports = true

# Configurazione pytest
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Configurazione coverage
[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "*/tests/*",
    "examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Pre-commit hooks configuration is in .pre-commit-config.yaml